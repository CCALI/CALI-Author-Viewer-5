// Copyright 1999-2024 CALI, The Center for Computer-Assisted Legal Instruction. All Rights Reserved.
// CALI Viewer 5, logic handler - 09/29/23
/*
	Handles variables declared in the lesson.
	Handles logic within text.
	Logic:
		
		SET varName = expression
		
		IF condition
		ENDIF
		
		IF condition
		ELSE
		ENDIF
		
		expression
	
*/

var logicBlock={
	// vars are properties storing lesson's custom variables, case sensitive.
	vars:{},//vars=new Map();// lesson's variable/value pairs. Saved with ScoreSave data.
	// htmlBuffer buffers text as generated by logic. 
	htmlBuffer:"",
	// 
	PRINT:function(str){logicBlock.htmlBuffer+=str;}
};

function logicInit()
{	// Called at start of lesson when ready to display a page. If page called 'Scripting Logic Variables' exists then start logic engine.
	page = book.pages['Scripting Logic Variables'];
	if (page)
	{
		StartPage="";
		var html=logicExecuteReplace(page.text);// Execute logic of page Scripting Logic Variables, discard the text.
		console.log(html);
		StartPage=logicBlock.vars['NextPage'];// Should be NextPage defined pointing to true first page of lesosn.
	}
}
function logicPageBegin()
{	// Called when going to new page. Reset page control variables which logic can override as needed. 
	logicBlock.vars['NextPage']="";
}

function logicExecuteReplace(html)
{	// Execute the code in HTML and replace macros in lesson's HTML text. Return HTML.
	if (html=='')
		return '';
	var parts=html.split('%%');
	if (parts.length>1)
	{	// Got some code
		var js='';
		var jsBlock='';
		//caller should clera the buffer once added to a page's text dispaly // logicBlock.printBuffer='';
		parts.forEach((part,i)=>
		{
			if ( i%2==1)
			{
				var codeLines=$('<div />').html(part.replaceAll('</p>',"</p>\n")).text().split("\n");
				codeLines.forEach((line)=>{
					line=line.trim();
					line=line.split('//')[0];
					if (line!='')
					{
						var lineU=line.toUpperCase();
						if (lineU.indexOf('SET ')==0)
						{
							js=line.substr(4);
							var i=js.indexOf("=");
							if (i>0)
							{
								var name=js.substr(0,i).trim();
								var exp=js.substr(i+1);
								js='logicBlock.vars["'+name+'"]='+exp+';';
							}
							else
								js='';
						}
						else
						if (lineU.indexOf('IF')==0)
							js="if ("+line.substr(3)+"){";
						else
						if (lineU.indexOf('ELSE')==0)
							js='}else{';
						else
						if (lineU.indexOf('ENDIF')==0)
							js='}';
						else
							js='PRINT('+line+');';
						jsBlock+=js+"\n";
					}
				});
			}
			else
			{
				jsBlock+='PRINT("'+part.replaceAll("\"","\\\"")+'");\n';
			}
		});
		//console.log(jsBlock);
		var js;
		try {
			//}}}}}}}}}}} TODO SCOPE needs to be fixed to vars don't attach to window or frames[0]
			js=new Function('with (logicBlock)with (logicBlock.vars){'+jsBlock+'}');
			js=js.bind(logicBlock);
			js();
		} catch (error){
			console.log(error);
			logicBlock.PRINT("<h1>Error "+error+"</h1>");
			console.log(jsBlock);
		}
		//console.log(js);
		console.log(js.toString());
		//console.log(logicBlock);
		//console.log(logicBlock);
		console.log(jsBlock);
		console.log(logicBlock);
		html=logicBlock.htmlBuffer.replaceAll('<p></p>','');
		logicBlock.htmlBuffer='';
	}
	return html;
}
